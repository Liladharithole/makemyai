import React, { useState } from "react";
import {
  Edit,
  Sparkle,
  Loader2,
  Copy,
  Download,
  FileText,
  Clock,
} from "lucide-react";

const WriteArticle = () => {
  const articleLengths = [
    {
      id: "short",
      text: "Short",
      words: "500-800 words",
      time: "2-3 min read",
    },
    {
      id: "medium",
      text: "Medium",
      words: "800-1200 words",
      time: "4-6 min read",
    },
    {
      id: "long",
      text: "Long",
      words: "1600+ words",
      time: "8+ min read",
    },
  ];

  const [selectedLength, setSelectedLength] = useState(articleLengths[0]);
  const [topic, setTopic] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [article, setArticle] = useState(null);
  const [copied, setCopied] = useState(false);

  const generateArticle = async (e) => {
    e.preventDefault();
    if (!topic.trim()) return;

    setIsGenerating(true);

    // Simulate API call
    await new Promise((resolve) => setTimeout(resolve, 1500));

    // Generate sample content
    const content = `# ${topic}\n\n## Introduction\nThis is a sample ${selectedLength.text.toLowerCase()} article about "${topic}" generated by our AI.\n\n## Main Content\nThe content would be tailored to the selected length (${
      selectedLength.words
    }). This section would contain detailed information.\n\n## Conclusion\nThis concludes our article on "${topic}."`;

    setArticle({
      title: topic,
      content,
      wordCount:
        selectedLength.id === "short"
          ? 650
          : selectedLength.id === "medium"
          ? 1000
          : 1800,
      readTime: selectedLength.time,
    });

    setIsGenerating(false);
  };

  const copyToClipboard = () => {
    if (!article) return;
    navigator.clipboard.writeText(article.content);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const downloadArticle = () => {
    if (!article) return;
    const element = document.createElement("a");
    const file = new Blob([article.content], { type: "text/plain" });
    element.href = URL.createObjectURL(file);
    element.download = `${article.title
      .replace(/\s+/g, "-")
      .toLowerCase()}-article.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 py-8 px-4 sm:px-6 lg:px-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-3xl font-bold text-gray-900 sm:text-4xl mb-3">
            AI Article Generator
          </h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Create high-quality, engaging content in seconds
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Left Column - Form */}
          <div className="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden">
            <div className="p-6 border-b border-gray-100">
              <h2 className="text-xl font-semibold text-gray-900 flex items-center gap-2">
                <Edit className="w-5 h-5 text-blue-600" />
                Article Details
              </h2>
            </div>

            <form onSubmit={generateArticle} className="p-6 space-y-6">
              <div>
                <label
                  htmlFor="topic"
                  className="block text-sm font-medium text-gray-700 mb-2"
                >
                  What would you like to write about?
                </label>
                <input
                  type="text"
                  id="topic"
                  value={topic}
                  onChange={(e) => setTopic(e.target.value)}
                  className="block w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all"
                  placeholder="e.g., The Future of Artificial Intelligence"
                  required
                />
              </div>

              <div>
                <p className="block text-sm font-medium text-gray-700 mb-3">
                  Select article length
                </p>
                <div className="grid gap-3">
                  {articleLengths.map((item) => (
                    <div
                      key={item.id}
                      onClick={() => setSelectedLength(item)}
                      className={`p-4 border rounded-lg cursor-pointer transition-all duration-200 ${
                        selectedLength.id === item.id
                          ? "border-blue-500 bg-blue-50 ring-2 ring-blue-100"
                          : "border-gray-200 hover:border-gray-300 bg-white"
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium text-gray-900">
                            {item.text}
                          </p>
                          <p className="text-sm text-gray-500">{item.words}</p>
                        </div>
                        <span className="text-sm text-gray-500">
                          {item.time}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="pt-2">
                <button
                  type="submit"
                  disabled={isGenerating || !topic.trim()}
                  className={`w-full flex justify-center items-center gap-2 px-6 py-3.5 rounded-xl text-base font-medium text-white transition-all duration-200 ${
                    isGenerating || !topic.trim()
                      ? "bg-gray-300 cursor-not-allowed"
                      : "bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 shadow-md hover:shadow-lg transform hover:-translate-y-0.5"
                  }`}
                >
                  {isGenerating ? (
                    <>
                      <Loader2 className="w-5 h-5 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <Sparkle className="w-5 h-5" />
                      Generate Article
                    </>
                  )}
                </button>
              </div>
            </form>
          </div>

          {/* Right Column - Results */}
          <div className="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden flex flex-col">
            <div className="p-6 border-b border-gray-100">
              <h2 className="text-xl font-semibold text-gray-900 flex items-center gap-2">
                <FileText className="w-5 h-5 text-blue-600" />
                Generated Article
              </h2>
            </div>

            <div className="flex-1 p-6 overflow-auto">
              {isGenerating ? (
                <div className="h-full flex flex-col items-center justify-center py-12">
                  <div className="relative">
                    <div className="w-16 h-16 border-4 border-blue-100 rounded-full"></div>
                    <div className="absolute top-0 left-0 w-16 h-16 border-t-4 border-blue-500 rounded-full animate-spin"></div>
                  </div>
                  <p className="mt-6 text-lg font-medium text-gray-700">
                    Generating your article
                  </p>
                  <p className="mt-2 text-sm text-gray-500">
                    This usually takes a few seconds
                  </p>
                </div>
              ) : article ? (
                <div className="space-y-6">
                  <div className="bg-gray-50 rounded-xl p-5 border border-gray-200">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="text-xl font-bold text-gray-900">
                          {article.title}
                        </h3>
                        <div className="mt-2 flex items-center text-sm text-gray-500">
                          <Clock className="w-4 h-4 mr-1.5" />
                          {article.readTime} â€¢ ~
                          {article.wordCount.toLocaleString()} words
                        </div>
                      </div>
                      <div className="flex space-x-2">
                        <button
                          onClick={copyToClipboard}
                          className="p-2 rounded-lg border border-gray-200 bg-white text-gray-600 hover:bg-gray-50 transition-colors"
                          title="Copy to clipboard"
                        >
                          {copied ? "Copied!" : <Copy className="w-5 h-5" />}
                        </button>
                        <button
                          onClick={downloadArticle}
                          className="p-2 rounded-lg border border-gray-200 bg-white text-gray-600 hover:bg-gray-50 transition-colors"
                          title="Download article"
                        >
                          <Download className="w-5 h-5" />
                        </button>
                      </div>
                    </div>
                  </div>

                  <div className="prose max-w-none">
                    {article.content.split("\n").map((paragraph, i) => (
                      <p key={i} className="text-gray-700 mb-4">
                        {paragraph || <br />}
                      </p>
                    ))}
                  </div>
                </div>
              ) : (
                <div className="h-full flex flex-col items-center justify-center text-center p-8">
                  <FileText className="w-16 h-16 text-gray-300 mb-4" />
                  <h3 className="text-lg font-medium text-gray-700 mb-2">
                    Your AI-Generated Article
                  </h3>
                  <p className="text-gray-500 max-w-md">
                    Enter a topic and select the desired length to generate a
                    well-written article. The content will appear here once
                    generated.
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default WriteArticle;
